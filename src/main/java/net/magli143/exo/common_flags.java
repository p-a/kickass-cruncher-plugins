package net.magli143.exo;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : exo_helper.h:888</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class common_flags extends Structure {
	/** C type : crunch_options* */
	public net.magli143.exo.crunch_options.ByReference options;
	/** C type : const char* */
	public Pointer outfile;
	public common_flags() {
		super();
	}
	@Override
	protected List<String> getFieldOrder() {
		return Arrays.asList("options", "outfile");
	}
	/**
	 * @param options C type : crunch_options*<br>
	 * @param outfile C type : const char*
	 */
	public common_flags(net.magli143.exo.crunch_options.ByReference options, Pointer outfile) {
		super();
		this.options = options;
		this.outfile = outfile;
	}
	public static class ByReference extends common_flags implements Structure.ByReference {
		
	};
	public static class ByValue extends common_flags implements Structure.ByValue {
		
	};
}
