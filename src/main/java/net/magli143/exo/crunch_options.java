package net.magli143.exo;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : exo_helper.h:919</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class crunch_options extends Structure {
	/** C type : const char* */
	public Pointer exported_encoding;
	public int max_passes;
	public int max_len;
	public int max_offset;
	public int use_literal_sequences;
	public int use_imprecise_rle;
	public crunch_options() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("exported_encoding", "max_passes", "max_len", "max_offset", "use_literal_sequences", "use_imprecise_rle");
	}
	/** @param exported_encoding C type : const char* */
	public crunch_options(Pointer exported_encoding, int max_passes, int max_len, int max_offset, int use_literal_sequences, int use_imprecise_rle) {
		super();
		this.exported_encoding = exported_encoding;
		this.max_passes = max_passes;
		this.max_len = max_len;
		this.max_offset = max_offset;
		this.use_literal_sequences = use_literal_sequences;
		this.use_imprecise_rle = use_imprecise_rle;
	}
	public static class ByReference extends crunch_options implements Structure.ByReference {
		
	};
	public static class ByValue extends crunch_options implements Structure.ByValue {
		
	};
}
