package net.magli143.exo;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Platform;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.ByteBuffer;
/**
 * JNA Wrapper for library <b>Exo</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface ExoLibrary extends Library {
	public static final String JNA_LIBRARY_NAME =
			Platform.isMac() ? Platform.isARM() ? "libexoarm.dylib" : "libexo.dylib" :
			Platform.isLinux() ? "libexo.so" :
			Platform.isWindows() ? "libexo.dll" : "die";
	
	
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(ExoLibrary.JNA_LIBRARY_NAME);
	public static final ExoLibrary INSTANCE = (ExoLibrary)Native.loadLibrary(ExoLibrary.JNA_LIBRARY_NAME, ExoLibrary.class);
	/**
	 * <i>native declaration : log.h:828</i><br>
	 * enum values
	 */
	public static interface log_level {
		/** <i>native declaration : log.h:817</i> */
		public static final int LOG_MIN = -99;
		/** <i>native declaration : log.h:818</i> */
		public static final int LOG_FATAL = -40;
		/** <i>native declaration : log.h:819</i> */
		public static final int LOG_ERROR = -30;
		/** <i>native declaration : log.h:820</i> */
		public static final int LOG_WARNING = -20;
		/** <i>native declaration : log.h:821</i> */
		public static final int LOG_BRIEF = -10;
		/** <i>native declaration : log.h:822</i> */
		public static final int LOG_NORMAL = 0;
		/** <i>native declaration : log.h:823</i> */
		public static final int LOG_VERBOSE = 10;
		/** <i>native declaration : log.h:824</i> */
		public static final int LOG_TRACE = 20;
		/** <i>native declaration : log.h:825</i> */
		public static final int LOG_DEBUG = 30;
		/** <i>native declaration : log.h:826</i> */
		public static final int LOG_DUMP = 40;
		/** <i>native declaration : log.h:827</i> */
		public static final int LOG_MAX = 99;
	};
	/**
	 * define<br>
	 * Conversion Error : { 0, 65535, 65535, 65535, 1, 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : exo_helper.h:0</i><br>
	 * { 0, 65535, 65535, 65535, 1, 0 }
	 */
	/** <i>native declaration : exo_helper.h</i> */
	public static final String CRUNCH_FLAGS = (String)"cCe:m:M:p:o:qv";
	/** <i>native declaration : exo_helper.h</i> */
	public static final String BASE_FLAGS = (String)"o:qv";
	/**
	 * define<br>
	 * Conversion Error : { 0, 0, 0 }<br>
	 * SKIPPED:<br>
	 * <i>native declaration : membuf.h:0</i><br>
	 * { 0, 0, 0 }
	 */
	/** <i>native declaration : log.h:829</i> */
	public interface log_formatter_f extends Callback {
		/**
		 * @param out IN<br>
		 * @param level IN<br>
		 * @param context IN
		 */
		void apply(ExoLibrary.FILE out, int level, Pointer context, Pointer charPtr1);
	};
	/** <i>native declaration : exo_helper.h:893</i> */
	public interface print_usage_f extends Callback {
		void apply(Pointer appl, int level, Pointer default_outfile);
	};
	/**
	 * Original signature : <code>void membuf_init(membuf*)</code><br>
	 * <i>native declaration : membuf.h:6</i>
	 */
	void membuf_init(membuf sb);
	/**
	 * Original signature : <code>void membuf_clear(membuf*)</code><br>
	 * <i>native declaration : membuf.h:8</i>
	 */
	void membuf_clear(membuf sb);
	/**
	 * Original signature : <code>void membuf_free(membuf*)</code><br>
	 * <i>native declaration : membuf.h:10</i>
	 */
	void membuf_free(membuf sb);
	/**
	 * Original signature : <code>void membuf_new(membuf**)</code><br>
	 * <i>native declaration : membuf.h:12</i><br>
	 * @deprecated use the safer method {@link #membuf_new(net.magli143.exo.membuf.ByReference[])} instead
	 */
	@Deprecated 
	void membuf_new(PointerByReference sbp);
	/**
	 * Original signature : <code>void membuf_new(membuf**)</code><br>
	 * <i>native declaration : membuf.h:12</i>
	 */
	void membuf_new(membuf.ByReference sbp[]);
	/**
	 * Original signature : <code>void membuf_delete(membuf**)</code><br>
	 * <i>native declaration : membuf.h:14</i><br>
	 * @deprecated use the safer method {@link #membuf_delete(net.magli143.exo.membuf.ByReference[])} instead
	 */
	@Deprecated 
	void membuf_delete(PointerByReference sbp);
	/**
	 * Original signature : <code>void membuf_delete(membuf**)</code><br>
	 * <i>native declaration : membuf.h:14</i>
	 */
	void membuf_delete(membuf.ByReference sbp[]);
	/**
	 * Gets the length of data put into the membuf<br>
	 * Original signature : <code>int membuf_memlen(membuf*)</code><br>
	 * <i>native declaration : membuf.h:19</i>
	 */
	int membuf_memlen(membuf sb);
	/**
	 * Original signature : <code>void membuf_truncate(membuf*, int)</code><br>
	 * <i>native declaration : membuf.h:21</i>
	 */
	void membuf_truncate(membuf sb, int len);
	/**
	 * returns the new len or < 0 if failure<br>
	 * Original signature : <code>int membuf_trim(membuf*, int)</code><br>
	 * <i>native declaration : membuf.h:26</i>
	 */
	int membuf_trim(membuf sb, int pos);
	/**
	 * Original signature : <code>void* membuf_memcpy(membuf*, int, const void*, int)</code><br>
	 * <i>native declaration : membuf.h:28</i>
	 */
	Pointer membuf_memcpy(membuf sb, int offset, Pointer mem, int len);
	/**
	 * Original signature : <code>void* membuf_append(membuf*, const void*, int)</code><br>
	 * <i>native declaration : membuf.h:30</i>
	 */
	Pointer membuf_append(membuf sb, Pointer mem, int len);
	/**
	 * Original signature : <code>void* membuf_append_char(membuf*, char)</code><br>
	 * <i>native declaration : membuf.h:32</i>
	 */
	Pointer membuf_append_char(membuf sb, byte c);
	/**
	 * Original signature : <code>void* membuf_insert(membuf*, int, const void*, int)</code><br>
	 * <i>native declaration : membuf.h:34</i>
	 */
	Pointer membuf_insert(membuf sb, int offset, Pointer mem, int len);
	/**
	 * Original signature : <code>void membuf_remove(membuf*, int, int)</code><br>
	 * <i>native declaration : membuf.h:36</i>
	 */
	void membuf_remove(membuf sb, int offset, int len);
	/**
	 * Grows the capacity if it's less than the given size<br>
	 * Original signature : <code>void membuf_atleast(membuf*, int)</code><br>
	 * <i>native declaration : membuf.h:41</i>
	 */
	void membuf_atleast(membuf sb, int size);
	/**
	 * Skrinks the capacity if it's greater than the given size<br>
	 * Original signature : <code>void membuf_atmost(membuf*, int)</code><br>
	 * <i>native declaration : membuf.h:46</i>
	 */
	void membuf_atmost(membuf sb, int size);
	/**
	 * Gets the current capacity of the membuf<br>
	 * Original signature : <code>int membuf_get_size(membuf*)</code><br>
	 * <i>native declaration : membuf.h:51</i>
	 */
	int membuf_get_size(membuf sb);
	/**
	 * Gets a pointer to the internal buffer. Don't dereferece it beyond<br>
	 * its size.<br>
	 * Original signature : <code>void* membuf_get(membuf*)</code><br>
	 * <i>native declaration : membuf.h:57</i>
	 */
	Pointer membuf_get(membuf sb);
	/**
	 * this log output function adds nothing<br>
	 * IN<br>
	 * Original signature : <code>void raw_log_formatter(FILE*, log_level, const char*, const char*)</code><br>
	 * @param out IN<br>
	 * @param level IN<br>
	 * @param context IN<br>
	 * <i>native declaration : log.h:838</i><br>
	 * @deprecated use the safer methods {@link #raw_log_formatter(net.magli143.exo.ExoLibrary.FILE, int, java.lang.String, java.lang.String)} and {@link #raw_log_formatter(net.magli143.exo.ExoLibrary.FILE, int, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void raw_log_formatter(ExoLibrary.FILE out, int level, Pointer context, Pointer log);
	/**
	 * this log output function adds nothing<br>
	 * IN<br>
	 * Original signature : <code>void raw_log_formatter(FILE*, log_level, const char*, const char*)</code><br>
	 * @param out IN<br>
	 * @param level IN<br>
	 * @param context IN<br>
	 * <i>native declaration : log.h:838</i>
	 */
	void raw_log_formatter(ExoLibrary.FILE out, int level, String context, String log);
	/**
	 * Original signature : <code>log_ctx* log_new()</code><br>
	 * <i>native declaration : log.h:842</i>
	 */
	ExoLibrary.log_ctx log_new();
	/**
	 * log_delete closes all added output streams<br>
	 * and files except for stdout and stderr<br>
	 * Original signature : <code>void log_delete(log_ctx*)</code><br>
	 * <i>native declaration : log.h:848</i>
	 */
	void log_delete(ExoLibrary.log_ctx ctx);
	/**
	 * IN/OUT<br>
	 * Original signature : <code>void log_set_level(log_ctx*, log_level)</code><br>
	 * @param ctx IN/OUT<br>
	 * <i>native declaration : log.h:854</i>
	 */
	void log_set_level(ExoLibrary.log_ctx ctx, int level);
	/**
	 * IN/OUT<br>
	 * Original signature : <code>void log_add_output_stream(log_ctx*, log_level, log_level, log_formatter_f*, FILE*)</code><br>
	 * @param ctx IN/OUT<br>
	 * @param min IN<br>
	 * @param max IN<br>
	 * @param default_f IN<br>
	 * <i>native declaration : log.h:863</i>
	 */
	void log_add_output_stream(ExoLibrary.log_ctx ctx, int min, int max, ExoLibrary.log_formatter_f default_f, ExoLibrary.FILE out_stream);
	/**
	 * IN<br>
	 * Original signature : <code>void log_vlog(log_ctx*, log_level, const char*, log_formatter_f*, const char*, va_list)</code><br>
	 * @param ctx IN<br>
	 * @param level IN<br>
	 * @param context IN<br>
	 * @param f IN<br>
	 * @param printf_str IN<br>
	 * <i>native declaration : log.h:873</i><br>
	 * @deprecated use the safer methods {@link #log_vlog(net.magli143.exo.ExoLibrary.log_ctx, int, java.lang.String, net.magli143.exo.ExoLibrary.log_formatter_f, java.lang.String, com.sun.jna.Pointer)} and {@link #log_vlog(net.magli143.exo.ExoLibrary.log_ctx, int, com.sun.jna.Pointer, net.magli143.exo.ExoLibrary.log_formatter_f, com.sun.jna.Pointer, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void log_vlog(ExoLibrary.log_ctx ctx, int level, Pointer context, ExoLibrary.log_formatter_f f, Pointer printf_str, Pointer argp);
	/**
	 * IN<br>
	 * Original signature : <code>void log_vlog(log_ctx*, log_level, const char*, log_formatter_f*, const char*, va_list)</code><br>
	 * @param ctx IN<br>
	 * @param level IN<br>
	 * @param context IN<br>
	 * @param f IN<br>
	 * @param printf_str IN<br>
	 * <i>native declaration : log.h:873</i>
	 */
	void log_vlog(ExoLibrary.log_ctx ctx, int level, String context, ExoLibrary.log_formatter_f f, String printf_str, Pointer argp);
	/**
	 * IN<br>
	 * Original signature : <code>void log_log_default(const char*, null)</code><br>
	 * @param printf_str IN<br>
	 * <i>native declaration : log.h:879</i><br>
	 * @deprecated use the safer methods {@link #log_log_default(java.lang.String, java.lang.Object)} and {@link #log_log_default(com.sun.jna.Pointer, java.lang.Object)} instead
	 */
	@Deprecated 
	void log_log_default(Pointer printf_str, Object... varargs);
	/**
	 * IN<br>
	 * Original signature : <code>void log_log_default(const char*, null)</code><br>
	 * @param printf_str IN<br>
	 * <i>native declaration : log.h:879</i>
	 */
	void log_log_default(String printf_str, Object... varargs);
	/**
	 * Original signature : <code>void hex_dump(int, unsigned char*, int)</code><br>
	 * <i>native declaration : log.h:884</i><br>
	 * @deprecated use the safer methods {@link #hex_dump(int, java.nio.ByteBuffer, int)} and {@link #hex_dump(int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void hex_dump(int level, Pointer p, int len);
	/**
	 * Original signature : <code>void hex_dump(int, unsigned char*, int)</code><br>
	 * <i>native declaration : log.h:884</i>
	 */
	void hex_dump(int level, ByteBuffer p, int len);
	/**
	 * Original signature : <code>void print_crunch_flags(log_level, const char*)</code><br>
	 * <i>native declaration : exo_helper.h:890</i><br>
	 * @deprecated use the safer methods {@link #print_crunch_flags(int, java.lang.String)} and {@link #print_crunch_flags(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void print_crunch_flags(int level, Pointer default_outfile);
	/**
	 * Original signature : <code>void print_crunch_flags(log_level, const char*)</code><br>
	 * <i>native declaration : exo_helper.h:890</i>
	 */
	void print_crunch_flags(int level, String default_outfile);
	/**
	 * Original signature : <code>void print_base_flags(log_level, const char*)</code><br>
	 * <i>native declaration : exo_helper.h:892</i><br>
	 * @deprecated use the safer methods {@link #print_base_flags(int, java.lang.String)} and {@link #print_base_flags(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	void print_base_flags(int level, Pointer default_outfile);
	/**
	 * Original signature : <code>void print_base_flags(log_level, const char*)</code><br>
	 * <i>native declaration : exo_helper.h:892</i>
	 */
	void print_base_flags(int level, String default_outfile);
	/**
	 * IN<br>
	 * Original signature : <code>void handle_crunch_flags(int, const char*, print_usage_f*, const char*, common_flags*)</code><br>
	 * @param flag_char IN<br>
	 * @param flag_arg IN<br>
	 * @param print_usage IN<br>
	 * @param appl IN<br>
	 * <i>native declaration : exo_helper.h:902</i><br>
	 * @deprecated use the safer methods {@link #handle_crunch_flags(int, java.lang.String, net.magli143.exo.ExoLibrary.print_usage_f, java.lang.String, net.magli143.exo.common_flags)} and {@link #handle_crunch_flags(int, com.sun.jna.Pointer, net.magli143.exo.ExoLibrary.print_usage_f, com.sun.jna.Pointer, net.magli143.exo.common_flags)} instead
	 */
	@Deprecated 
	void handle_crunch_flags(int flag_char, Pointer flag_arg, ExoLibrary.print_usage_f print_usage, Pointer appl, common_flags options);
	/**
	 * IN<br>
	 * Original signature : <code>void handle_crunch_flags(int, const char*, print_usage_f*, const char*, common_flags*)</code><br>
	 * @param flag_char IN<br>
	 * @param flag_arg IN<br>
	 * @param print_usage IN<br>
	 * @param appl IN<br>
	 * <i>native declaration : exo_helper.h:902</i>
	 */
	void handle_crunch_flags(int flag_char, String flag_arg, ExoLibrary.print_usage_f print_usage, String appl, common_flags options);
	/**
	 * IN<br>
	 * Original signature : <code>void handle_base_flags(int, const char*, print_usage_f*, const char*, const char**)</code><br>
	 * @param flag_char IN<br>
	 * @param flag_arg IN<br>
	 * @param print_usage IN<br>
	 * @param appl IN<br>
	 * <i>native declaration : exo_helper.h:911</i><br>
	 * @deprecated use the safer methods {@link #handle_base_flags(int, java.lang.String, net.magli143.exo.ExoLibrary.print_usage_f, java.lang.String, java.lang.String[])} and {@link #handle_base_flags(int, com.sun.jna.Pointer, net.magli143.exo.ExoLibrary.print_usage_f, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated 
	void handle_base_flags(int flag_char, Pointer flag_arg, ExoLibrary.print_usage_f print_usage, Pointer appl, PointerByReference default_outfilep);
	/**
	 * IN<br>
	 * Original signature : <code>void handle_base_flags(int, const char*, print_usage_f*, const char*, const char**)</code><br>
	 * @param flag_char IN<br>
	 * @param flag_arg IN<br>
	 * @param print_usage IN<br>
	 * @param appl IN<br>
	 * <i>native declaration : exo_helper.h:911</i>
	 */
	void handle_base_flags(int flag_char, String flag_arg, ExoLibrary.print_usage_f print_usage, String appl, String default_outfilep[]);
	/**
	 * Original signature : <code>void print_license()</code><br>
	 * <i>native declaration : exo_helper.h:925</i>
	 */
	void print_license();
	/**
	 * Original signature : <code>void crunch_backwards(membuf*, membuf*, crunch_options*, crunch_info*)</code><br>
	 * @param options IN<br>
	 * <i>native declaration : exo_helper.h:930</i>
	 */
	void crunch_backwards(membuf inbuf, membuf outbuf, crunch_options options, crunch_info info);
	/**
	 * Original signature : <code>void crunch(membuf*, membuf*, crunch_options*, crunch_info*)</code><br>
	 * @param options IN<br>
	 * <i>native declaration : exo_helper.h:935</i>
	 */
	void crunch(membuf inbuf, membuf outbuf, crunch_options options, crunch_info info);
	/**
	 * Original signature : <code>void decrunch(int, membuf*, membuf*)</code><br>
	 * <i>native declaration : exo_helper.h:937</i>
	 */
	void decrunch(int level, membuf inbuf, membuf outbuf);
	/**
	 * Original signature : <code>void decrunch_backwards(int, membuf*, membuf*)</code><br>
	 * <i>native declaration : exo_helper.h:939</i>
	 */
	void decrunch_backwards(int level, membuf inbuf, membuf outbuf);
	/**
	 * Original signature : <code>void reverse_buffer(char*, int)</code><br>
	 * <i>native declaration : exo_helper.h:941</i><br>
	 * @deprecated use the safer methods {@link #reverse_buffer(java.nio.ByteBuffer, int)} and {@link #reverse_buffer(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	void reverse_buffer(Pointer start, int len);
	/**
	 * Original signature : <code>void reverse_buffer(char*, int)</code><br>
	 * <i>native declaration : exo_helper.h:941</i>
	 */
	void reverse_buffer(ByteBuffer start, int len);
	/**
	 * java.lang.IllegalArgumentException: Not a simple identifier : 'com.sun.jna.Pointer'<br>
	 * SKIPPED:<br>
	 * <i>native declaration : log.h:880</i><br>
	 * G_log_ctx
	 */
	public static final class G_log_level {
		private static IntByReference G_log_level;
		public static synchronized IntByReference get() {
			if ((G_log_level == null)) {
				G_log_level = new IntByReference();
				G_log_level.setPointer(ExoLibrary.JNA_NATIVE_LIB.getGlobalVariableAddress("G_log_level"));
			}
			return G_log_level;
		}
	};
	public static final class G_log_log_level {
		private static IntByReference G_log_log_level;
		public static synchronized IntByReference get() {
			if ((G_log_log_level == null)) {
				G_log_log_level = new IntByReference();
				G_log_log_level.setPointer(ExoLibrary.JNA_NATIVE_LIB.getGlobalVariableAddress("G_log_log_level"));
			}
			return G_log_log_level;
		}
	};
	public static class FILE extends PointerType {
		public FILE(Pointer address) {
			super(address);
		}
		public FILE() {
			super();
		}
	};
	public static class log_ctx extends PointerType {
		public log_ctx(Pointer address) {
			super(address);
		}
		public log_ctx() {
			super();
		}
	};
}
